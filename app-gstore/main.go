package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"time"

	"cloud.google.com/go/datastore"
)

var datastoreClient *datastore.Client

// indexHandler responds to requests with our greeting.
func indexHandler(w http.ResponseWriter, r *http.Request) {
	if r.URL.Path != "/" {
		http.NotFound(w, r)
		return
	}
	fmt.Fprint(w, "Hello, World! version 3.2")
}

type Person struct {
	ClientId int    `datastore:"client_id"`
	ID       int    `datastore:"ID"` // auto generated by datastore
	Dob      string `datastore:"dob"`
	Name     string `datastore:"name"`
}

func gcloudDataStoreCreateClient(w http.ResponseWriter, r *http.Request) {
	ctx := context.Background()
	name := fmt.Sprintf("client-%d", time.Now().Unix())

	k := datastore.NameKey("people", name, nil)
	e := &Person{
		ClientId: int(time.Now().Unix()),
		Dob:      "09021997",
		Name:     "hongminhcbg",
	}

	if k, err := datastoreClient.Put(ctx, k, e); err != nil {
		panic(err)
	} else {
		fmt.Println("Created client with id: ", k.ID)
	}

	fmt.Println("Created client with key: ", k)
	p := make([]Person, 0)
	q := datastore.NewQuery("people").Limit(10).Order("-client_id")
	if _, err := datastoreClient.GetAll(ctx, q, &p); err != nil {
		panic(err)
		// Handle error
	}

	w.WriteHeader(http.StatusOK)
	w.Write([]byte(fmt.Sprintf("query people: %v", p)))
}

func main() {
	http.HandleFunc("/", indexHandler)
	http.HandleFunc("/gcloud-datastore-create-client", gcloudDataStoreCreateClient)
	// Set this in app.yaml when running in production.
	projectID := os.Getenv("GCLOUD_PROJECT_ID")
	fmt.Println("projectID: ", projectID)
	ctx := context.Background()

	var err error
	datastoreClient, err = datastore.NewClient(ctx, projectID)
	if err != nil {
		log.Fatal(err)
	}

	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
		log.Printf("Defaulting to port %s", port)
	}

	log.Printf("Listening on port %s", port)
	if err := http.ListenAndServe(":"+port, nil); err != nil {
		log.Fatal(err)
	}
}
